#!/usr/bin/env bash
# Build the project
set -euo pipefail
trap 'echo "$0: line $LINENO: $BASH_COMMAND: exitcode $?"' ERR
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
WORKSPACE="$(realpath "$SCRIPT_DIR/..")"

# Database file location
DB_FILE="$WORKSPACE/.clodpod.sqlite"

# Initialize database and create table if it doesn't exist
init_db() {
    sqlite3 "$DB_FILE" <<EOF
CREATE TABLE IF NOT EXISTS projects (
    path TEXT UNIQUE NOT NULL,
    name TEXT UNIQUE NOT NULL,
    date_added TEXT DEFAULT (datetime('now'))
);
EOF
}

# Add a new project
add_project() {
    local path="${1:-}"
    local name="${2:-}"
    
    if [[ -z "$path" ]]; then
        echo "Error: Path is required" >&2
        return 1
    fi
    
    # Use basename of path if name not provided
    path="$(realpath "$path")"
    if [[ -z "$name" ]]; then
        name="$(basename "$path")"
    fi

    if sqlite3 "$DB_FILE" <<EOF
INSERT INTO projects (path, name, date_added) VALUES ('$path', '$name', datetime('now'));
EOF
    then
        echo "Project added: $name ($path)"
    else
        echo "Error: Failed to add project (path or name may already exist)" >&2
        return 1
    fi
}

# Remove a project by name or path
remove_project() {
    local identifier="${1:-}"
    
    if [[ -z "$identifier" ]]; then
        echo "Error: Project name or path required" >&2
        return 1
    fi
    path="$(realpath "$identifier")"
    
    # Try to remove by name first, then by path
    local rows_affected
    rows_affected=$(sqlite3 "$DB_FILE" <<EOF
DELETE FROM projects WHERE name = '$identifier' OR path = '$identifier' OR path = '$path';
SELECT changes();
EOF
)
    
    if [[ ${rows_affected:-0} -gt 0 ]]; then
        echo "Project removed"
    else
        echo "Error: Project not found" >&2
        return 1
    fi
}

# List all projects
list_projects() {
    sqlite3 -column -header "$DB_FILE" <<EOF || return 1
SELECT name, path, date_added FROM projects ORDER BY date_added DESC;
EOF
}

# Find project by path
find_by_path() {
    local path="${1:-}"
    
    if [[ -z "$path" ]]; then
        echo "Error: Path required" >&2
        return 1
    fi

    path="$(realpath "$path")"
    sqlite3 -column -header "$DB_FILE" <<EOF || return 1
SELECT name, path, date_added FROM projects WHERE path = '$path';
EOF
}

# Find project by name
find_by_name() {
    local name="${1:-}"
    
    if [[ -z "$name" ]]; then
        echo "Error: Name required" >&2
        return 1
    fi
    
    sqlite3 -column -header "$DB_FILE" <<EOF || return 1
SELECT name, path, date_added FROM projects WHERE name = '$name';
EOF
}

# Get all projects as bash array with --dir format
# Usage: get_projects_array ARRAY_NAME
# Populates the named array with entries like: "--dir" "name:path"
get_projects_array() {
    local -n arr="$1"
    arr=()
    
    local result
    result=$(sqlite3 -separator '|' "$DB_FILE" <<EOF || return 1
SELECT name, path FROM projects ORDER BY date_added DESC;
EOF
)
    
    if [[ -n "$result" ]]; then
        while IFS='|' read -r name path; do
            arr+=("--dir" "${name}:${path}")
        done <<< "$result"
    fi
}

# Main script logic
main() {
    # Initialize database
    init_db
    
    # Parse command line arguments
    local cmd="${1:-}"
    
    case "$cmd" in
        add)
            add_project "${2:-}" "${3:-}"
            ;;
        remove|rm)
            remove_project "${2:-}"
            ;;
        list|ls)
            list_projects
            ;;
        find-by-path)
            find_by_path "${2:-}"
            ;;
        find-by-name)
            find_by_name "${2:-}"
            ;;
        get-array)
            # Example usage: demonstrates the array function
            local projects_array
            get_projects_array projects_array
            printf '%s\n' "${projects_array[@]}"
            ;;
        *)
            appname=$(basename "$0")
            echo "Usage: $appname command [args...]"
            echo ""
            echo "Commands:"
            echo "  list                 List all projects"
            echo "  add <path> [name]    Add a new project (name defaults to basename of path)"
            echo "  remove <identifier>  Remove project by name or path"
            echo "  find-by-path <path>  Find project by path"
            echo "  find-by-name <name>  Find project by name"
            echo "  get-array            Output projects in --dir format (for testing)"
            exit 1
            ;;
    esac
}

# Run main function
main "$@"
