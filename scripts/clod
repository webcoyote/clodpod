#!/usr/bin/env bash
# Build a MacOS virtual machine that runs Claude AI
set -euo pipefail
trap 'echo "$0: line $LINENO: $BASH_COMMAND: exitcode $?"' ERR
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
WORKSPACE="$(realpath "$SCRIPT_DIR/..")"


###############################################################################
# Definitions
###############################################################################
MACOS_IMAGE="ghcr.io/cirruslabs/macos-sequoia-xcode:latest"
BASE_VM_NAME="clodpod-base-xcode"
DST_VM_NAME="clodpod-xcode"


###############################################################################
# Preconditions
###############################################################################
if [[ $OSTYPE != 'darwin'* ]]; then
    echo >&2 "ERROR: this script is for Mac OSX"
    exit 1
fi
if [[ ! -f "$HOME/.claude.json" ]]; then
    echo >&2 "ERROR: missing '$HOME/.claude.json'"
    exit 1
fi


###############################################################################
# Select project directory to mirror
###############################################################################
if [[ -z "${PROJECT_DIR:-}" ]]; then
    PROJECT_DIR="$(git rev-parse --show-toplevel 2>/dev/null)" || PROJECT_DIR="$PWD"
fi


###############################################################################
# Functions
###############################################################################
info () {
  echo >&2 -e "\033[36m$*\033[0m"
}
warn () {
  echo >&2 -e "\033[33m$*\033[0m"
}
error () {
  echo >&2 -e "\033[31m$*\033[0m"
}
abort () {
  error "$@"
  exit 1
}

# heredoc MESSAGE << EOF
#    your favorite text here
# EOF
heredoc(){ IFS=$'\n' read -r -d '' "${1}" || true; }

get_vm_state () {
    local vm_name="$1"
    local vm_source="${2:-local}"
    tart list --source "$vm_source" --format json \
        | jq -r ".[] | select(.Name == \"$vm_name\") | .State" 2>/dev/null \
        || echo ""
}

get_vm_exists () {
    local vm_name="$1"
    local vm_source="${2:-local}"
    [[ "$(get_vm_state "$vm_name" "$vm_source")" != "" ]]
}

wait_vm_state () {
    local vm_name="$1"
    local desired_state="$2"
    local timeout=20
    local elapsed=0

    while [[ $elapsed -lt $timeout ]]; do
        local state=$(get_vm_state "$vm_name")
        if [[ "$state" == "$desired_state" ]]; then
            info "✅ VM '$vm_name' is $desired_state"
            return 0
        fi
        info "⏳ Waiting for VM to be $desired_state... ($elapsed/$timeout seconds)"
        sleep 1
        ((elapsed++)) || true
    done
    abort "❌ VM '$vm_name' failed to be $desired_state within $timeout seconds"
}

wait_vm_running () {
    wait_vm_state "$1" "running"
}

stop_vm () {
    local vm_name="$1"
    if [[ "$(get_vm_state "$vm_name")" != "stopped" ]]; then
        info "🛑 Stopping $vm_name..."
        tart stop "$vm_name"
        wait_vm_state "$vm_name" "stopped"
    fi
}

delete_vm () {
    local vm_name="$1"
    if tart list --quiet | grep "^$vm_name$" >/dev/null ; then
        stop_vm "$vm_name"
        info "🛑 Deleting $vm_name..."
        tart delete "$vm_name" &>/dev/null || true
    fi
}

cleanup_tmp_vm () {
    if [[ -n "${TMP_VM_NAME:-}" ]]; then
        delete_vm "$TMP_VM_NAME"
    fi
}

###############################################################################
# Install required tools
###############################################################################
info "🔨 Installing tools..."
TOOLS+=("cirruslabs/cli/tart")      # macOS and Linux VMs on Apple Silicon
TOOLS+=("jq")                       # JSON processing tool
TOOLS+=("netcat")                   # networking tool
TOOLS+=("rush")                     # GNU Rush is a Restricted User Shell
for tool in "${TOOLS[@]}"; do
    if ! command -v "$(basename "$tool")" &>/dev/null ; then
        info "🔨 Installing $tool"
        brew install --quiet "$tool"
    fi
done


###############################################################################
# Create passwordless SSH key with permission to remotely login to guest
###############################################################################
SSH_DIR="$HOME/.ssh/"
SSH_KEYFILE_PRIV="$SSH_DIR/id_ed25519_clodpod"
SSH_KEYFILE_PUB="$SSH_KEYFILE_PRIV.pub"
if [[ ! -f "$SSH_KEYFILE_PRIV" ]] || [[ ! -f "$SSH_KEYFILE_PUB" ]]; then
    mkdir -p "$SSH_DIR"
    ssh-keygen -t ed25519 \
        -f "$SSH_KEYFILE_PRIV" \
        -N "" \
        -q \
        -C "clodpod-${USER}@${HOSTNAME}"
    REBUILD_DST=true
fi


###############################################################################
# Download MACOS image
###############################################################################
if ! get_vm_exists "$MACOS_IMAGE" "oci" ; then
    # Defer downloading the image until after asking to stop
    # running images to avoid asking questions after a long delay
    DOWNLOAD_IMAGE=true

    # Changing the MACOS image requires rebuild
    REBUILD_BASE=true
    REBUILD_DST=true
elif ! get_vm_exists "$BASE_VM_NAME" ; then
    REBUILD_BASE=true
    REBUILD_DST=true
elif ! get_vm_exists "$DST_VM_NAME" ; then
    REBUILD_DST=true
fi

if [[ "${REBUILD_DST:-}" != "" ]]; then
    if [[ "$(get_vm_state "$DST_VM_NAME")" == "running" ]]; then
        read -p "$DST_VM_NAME is running; delete it? (y/N)" -n 1 -r response
        echo
        [[ "$response" =~ ^[Yy]$ ]] || exit 0
    fi
    delete_vm "$DST_VM_NAME"
fi

if [[ "${DOWNLOAD_IMAGE:-}" != "" ]]; then
    info "🔨 Downloding image..."
    tart pull "$MACOS_IMAGE" >/dev/null
fi


###############################################################################
# Configure VM settings
###############################################################################
if [[ "${REBUILD_DST:-}" != "" ]]; then
    info "🔨 Configuring credentials..."

    # Copy claude configuration file, excluding things we don't need
    warn "Disabling claude auto-updates"
    warn "- https://github.com/anthropics/claude-code/issues/5118"
    warn "- https://github.com/anthropics/claude-code/issues/5151"
    jq  'del(.projects, .cachedChangelog, .tipsHistory, .mcpServers) | .autoUpdates = false' \
        "$HOME/.claude.json" > "$WORKSPACE/guest/home/.claude.json"

    # Get git config from host
    GIT_USER_NAME=$(git config --global --get user.name 2>/dev/null || echo "")
    GIT_USER_EMAIL=$(git config --global --get user.email 2>/dev/null || echo "")
    git config set -f "$WORKSPACE/guest/home/.gitconfig" user.name "$GIT_USER_NAME"
    git config set -f "$WORKSPACE/guest/home/.gitconfig" user.email "$GIT_USER_EMAIL"

    # Add SSH public key to host's authorized_keys
    GUEST_AUTHORIZED_KEYS="$WORKSPACE/guest/home/.ssh/authorized_keys"
    mkdir -p "$(dirname "$GUEST_AUTHORIZED_KEYS")"
    cp "$SSH_KEYFILE_PUB" "$GUEST_AUTHORIZED_KEYS"
    chmod 600 "$GUEST_AUTHORIZED_KEYS"
fi


###############################################################################
# Create Base VM
###############################################################################
# It's possible this script will fail or be cancelled halfway
# through so build to a temporary image and rename when complete
TMP_VM_NAME="TMP-$(openssl rand -hex 8)"
trap cleanup_tmp_vm EXIT

if [[ "${REBUILD_BASE:-}" != "" ]]; then
    delete_vm "$BASE_VM_NAME"

    info "🔨 Cloning image to $TMP_VM_NAME..."
    tart clone "$MACOS_IMAGE" "$TMP_VM_NAME"

    info "🚀 Starting $TMP_VM_NAME"
    tart run \
        --dir "__install:$WORKSPACE/guest" \
        --dir "project:$PROJECT_DIR" \
        "$TMP_VM_NAME" </dev/null &>/dev/null & disown
    wait_vm_running "$TMP_VM_NAME"

    info "🔨 Running install script..."
    tart exec -it "$TMP_VM_NAME" \
        "/usr/bin/env" bash \
        "/Volumes/My Shared Files/__install/install.sh"

    info "🔨 Renaming $TMP_VM_NAME to $BASE_VM_NAME"
    tart rename "$TMP_VM_NAME" "$BASE_VM_NAME"
fi


###############################################################################
# Create Dst VM
###############################################################################
if [[ "${REBUILD_DST:-}" != "" ]]; then
    # If the base image is already running then do some jiggery-pokery
    # to rename it so we can avoid stopping the VM and starting another
    if [[ "$(get_vm_state "$BASE_VM_NAME")" == "running" ]]; then
        tart rename "$BASE_VM_NAME" "$TMP_VM_NAME"
        tart clone "$TMP_VM_NAME" "$BASE_VM_NAME"
    else
        tart clone "$BASE_VM_NAME" "$TMP_VM_NAME"
        tart run \
            --dir "__install:$WORKSPACE/guest" \
            --dir "project:$PROJECT_DIR" \
            "$TMP_VM_NAME" </dev/null &>/dev/null & disown
        wait_vm_running "$TMP_VM_NAME"
    fi

    info "🔨 Running setup script..."
    tart exec -it "$TMP_VM_NAME" \
        "/usr/bin/env" bash \
        "/Volumes/My Shared Files/__install/configure.sh"

    info "🔨 Renaming $TMP_VM_NAME to $DST_VM_NAME"
    tart rename "$TMP_VM_NAME" "$DST_VM_NAME"
fi

###############################################################################
# Run the application
###############################################################################
heredoc LOCAL_NETWORK_ERROR << EOF
\n
ERROR: unable to connect to $DST_VM_NAME.

This typically occurs when your terminal program ($TERM_PROGRAM)
has not been granted "Local Network" access rights.

- Open "System Settings.app"
- Navigate to "Privacy & Security"
- Select "Local Network"
- Grant access to "$TERM_PROGRAM"
\n
EOF

if [[ "$(get_vm_state "$DST_VM_NAME")" != "running" ]]; then
    info "🚀 Starting $DST_VM_NAME"
    tart run --dir "project:$PROJECT_DIR" "$DST_VM_NAME" </dev/null &>/dev/null & disown
    wait_vm_running "$DST_VM_NAME"
fi

info "🚀 Checking $DST_VM_NAME IP connectivity"
IPADDR="$(tart ip --wait 20 "$DST_VM_NAME")"
if ! nc -z "$IPADDR" 22 ; then
    error "$LOCAL_NETWORK_ERROR"
    read -n 1 -s -r -p "Press any key to open System Settings -> Privacy & Security"
    open "/System/Library/PreferencePanes/Security.prefPane"
fi

info "🚀 Connect to $DST_VM_NAME (ssh clodpod@$IPADDR)"
exec ssh \
    -q \
    -o StrictHostKeyChecking=no \
    -o UserKnownHostsFile=/dev/null \
    -i "$SSH_KEYFILE_PRIV" \
    "clodpod@$IPADDR"
